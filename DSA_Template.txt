/*-
 * <Problem Source> <Problem Number>. <Problem Name>
 * 
 * Problem Statement:
 *     <Insert properly indented problem statement, wrapped at ~80 characters>
 * 
 * Input:
 *     - <Detail each input parameter with constraints>
 *     - <Format: parameter (constraints)>
 * 
 * Output:
 *     - <Clearly specify expected output format>
 * 
 * Example:
        -- add multiple imprtant examples
 *     Input: <sample input>
 *     Output: <expected output>
 * 
 *     Explanation:
 *     <Visual representation if applicable (e.g., tree structure, graph)>
 *     <Step by step explanation of the example>
 */

import java.util.*;

public class ClassName {

    /*-
     * Required helper classes/methods (if any) along with explanation
     */

    /*-
     * Approach [1 if multiple approaches exist, else just "Approach"]: <Name>
     * 
     * Intuition:
     * - Detailed explanation of why this approach works
     * - Core insight that leads to the solution
     * - Reasoning behind choosing specific data structures/algorithms
     * - Visual explanation if helpful
     * 
     * Explanation:
     * - Step 1: What this step does and why it's needed
     * - Step 2: Detailed explanation of implementation
     * - Step 3: How it connects to the solution
     * - Include examples for complex steps
     * 
     * Time Complexity: O(X) where X is... and reason
     * Space Complexity: O(Y) where Y is... and reason
     * 
     * @param param1    Description of first parameter (constraints)
     * @param param2    Description of second parameter (constraints)
     * @return         Description of return value
     */
    public static ReturnType mainMethod(Parameters) {
        // Initialize necessary data structures
        
        // Validate input parameters
        
        // Handle edge cases (null, empty, etc.)
        
        // Core logic implementation
        
        // Process intermediate results
        
        // Format final output
        return result;
    }

    /*-
     * Helper Method:
     * 
     * Intuition:
     * - Why this helper method is needed
     * - How it supports the main solution
     * 
     * Explanation:
     * - Detailed step-by-step breakdown
     * - Edge cases handled
     * - Connection to main solution
     * 
     * Time Complexity: O(X)
     * Space Complexity: O(Y)
     * 
     * @param param1    Description of first parameter
     * @return         Description of return value
     */
    private static ReturnType helperMethod(Parameters) {
        // Initialize helper variables
        
        // Input validation for helper method
        
        // Perform helper operation
        
        // Process helper result
        return result;
    }

    public static void main(String[] args) {
        // Test Case 1: Basic cases
        System.out.println("\nBasic Test Cases:");
        System.out.println("Input: [1,2,3], Expected: 6, Output: " + mainMethod(new int[]{1,2,3}));
        System.out.println("Input: [0,0,0], Expected: 0, Output: " + mainMethod(new int[]{0,0,0}));

        // Test Case 2: Edge cases
        System.out.println("\nEdge Cases:");
        System.out.println("Input: [], Expected: 0, Output: " + mainMethod(new int[]{}));
        System.out.println("Input: null, Expected: 0, Output: " + mainMethod(null));

        // Test Case 3: Boundary cases
        System.out.println("\nBoundary Cases:");
        System.out.println("Input: [MAX_VALUE], Output: " + mainMethod(new int[]{Integer.MAX_VALUE}));
        System.out.println("Input: [MIN_VALUE], Output: " + mainMethod(new int[]{Integer.MIN_VALUE}));

        // Test Case 4: Special cases
        System.out.println("\nSpecial Cases:");
        System.out.println("Input: [sorted array], Output: " + mainMethod(new int[]{1,2,3,4,5}));
        System.out.println("Input: [reverse sorted], Output: " + mainMethod(new int[]{5,4,3,2,1}));
    }
}

/*
FORMAT GUIDELINES:
1. Problem Source: Always mention LeetCode/GeeksForGeeks source if available
2. Each method must have both Intuition and Explanation sections
3. All methods including helper methods must follow the same documentation format
4. Main method must include diverse test cases covering:
   - Normal cases
   - Edge cases (null, empty)
   - Boundary cases (min/max values)
   - Special conditions
5. Method documentation must include:
   - @param for each parameter with constraints
   - @return with clear description
6. Multiple approaches should be ordered from worst to best complexity
7. Comments should be wrapped at ~80 characters
8. Maintain consistent indentation (4 spaces)
9. Method implementations must include single-line comments that:
   - Describe the specific operation being performed on that line/block
   - Explain the reasoning behind each transformation
   - Reference variables and data structures being used
   - Highlight key algorithm steps and their purpose
   - Use technical terms relevant to the approach
   Examples:
   - "Use array elements as indices to mark visited numbers"
   - "Convert character to index using ASCII value offset"
   - "Maintain sliding window of size k using deque"
10. Include a main method for testing with following structure:
    - Group similar test cases under descriptive comments
    - Print results for visual verification
    - Test structure:
      * Basic/Happy path cases
      * Edge cases (null, empty inputs)
      * Boundary cases (min/max values)
      * Complex/Large inputs
      * Special cases (sorted, reverse sorted, etc.)
*/ 